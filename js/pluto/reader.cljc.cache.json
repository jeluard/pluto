["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$read"]],"~:name","~$pluto.reader","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$clojure.spec.alpha","~$cljs.spec.alpha","~$pluto.reader.errors","^>","~$cljs.tools.reader.edn","^?","~$pluto.reader.views","^@","~$errors","^>","~$clojure.tools.reader.edn","^?","^;","^;","~$hooks","~$pluto.reader.hooks","^D","^D","~$pluto.utils","^E","~$spec","^=","~$utils","^E","^=","^=","~$edn","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$valid-element?",["^ ","^6","~$pluto.reader/valid-element?","~:file","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","~:line",50,"~:column",1,"~:end-line",50,"~:end-column",25,"~:meta",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",50,"^P",11,"^Q",50,"^R",25],"~:tag","~$cljs.core/MultiFn"],"~$reader-error",["^ ","~:protocol-inline",null,"^S",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",21,"^P",7,"^Q",21,"^R",19,"~:arglists",["~#list",["~$quote",["^Y",[["~$ex"]]]]]],"^6","~$pluto.reader/reader-error","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",19,"~:method-params",["^Y",[["^["]]],"~:protocol-impl",null,"~:arglists-meta",["^Y",[null,null]],"^P",1,"~:variadic?",false,"^O",21,"~:ret-tag","~$any","^Q",21,"~:max-fixed-arity",1,"~:fn-var",true,"^X",["^Y",["^Z",["^Y",[["^["]]]]]],"~$mandatory-keys",["^ ","^6","~$pluto.reader/mandatory-keys","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",43,"^P",1,"^Q",43,"^R",20,"^S",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",43,"^P",6,"^Q",43,"^R",20],"^T","~$cljs.core/ISet"],"^5",["^ ","^W",null,"^S",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",27,"^P",16,"^Q",27,"^R",20,"~:export",true,"^X",["^Y",["^Z",["^Y",[["~$s"]]]]],"~:doc","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * :data the extension definition as a map\n   * :errors a vector of errors map triggered during read"],"^6","~$pluto.reader/read","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",20,"^11",["^Y",[["~$s"]]],"^12",null,"^1<",true,"^13",["^Y",[null,null]],"^P",1,"^14",false,"^O",27,"^Q",27,"^17",1,"^18",true,"^X",["^Y",["^Z",["^Y",[["~$s"]]]]],"^1=","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * :data the extension definition as a map\n   * :errors a vector of errors map triggered during read"],"~$validate",["^ ","^W",null,"^S",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",75,"^P",7,"^Q",75,"^R",15,"^X",["^Y",["^Z",["^Y",[[["^ ","~:keys",["~$capacities"]],"~$m"]]]]]],"^6","~$pluto.reader/validate","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",15,"^11",["^Y",[["~$p__1464","~$m"]]],"^12",null,"^13",["^Y",[null,null]],"^P",1,"^14",false,"^O",75,"^15",["^4",[null,"^16"]],"^Q",75,"^17",2,"^18",true,"^X",["^Y",["^Z",["^Y",[[["^ ","^1@",["^1A"]],"~$m"]]]]]],"~$valid-keys",["^ ","^6","~$pluto.reader/valid-keys","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",44,"^P",1,"^Q",44,"^R",16,"^S",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",44,"^P",6,"^Q",44,"^R",16],"^T","^1;"],"~$capacity?",["^ ","^W",null,"^S",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",46,"^P",7,"^Q",46,"^R",16,"^X",["^Y",["^Z",["^Y",[["~$m","~$s"]]]]]],"^6","~$pluto.reader/capacity?","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",16,"^11",["^Y",[["~$m","~$s"]]],"^12",null,"^13",["^Y",[null,null]],"^P",1,"^14",false,"^O",46,"^15","^16","^Q",46,"^17",2,"^18",true,"^X",["^Y",["^Z",["^Y",[["~$m","~$s"]]]]]],"~$parse",["^ ","^W",null,"^S",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",87,"^P",16,"^Q",87,"^R",21,"^1<",true,"^X",["^Y",["^Z",["^Y",[["~$ctx","~$m"]]]]],"^1=","Parse an extension definition map as encapsulated in :data key of the map returned by read.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env` [optional] a map of extension environment, may contain for example id of extension {:id 'id'}, will be\n   * provided as second parameter into event and query handlers\n\n   Returns a map defining:\n   * :data a map of meta and parsed hooks\n   * :permissions a vector of required permissions\n   * :errors a vector of errors maps triggered during parse"],"^6","~$pluto.reader/parse","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",21,"^11",["^Y",[["^1I","~$m"]]],"^12",null,"^1<",true,"^13",["^Y",[null,null]],"^P",1,"^14",false,"^O",87,"^15","^16","^Q",87,"^17",2,"^18",true,"^X",["^Y",["^Z",["^Y",[["^1I","~$m"]]]]],"^1=","Parse an extension definition map as encapsulated in :data key of the map returned by read.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env` [optional] a map of extension environment, may contain for example id of extension {:id 'id'}, will be\n   * provided as second parameter into event and query handlers\n\n   Returns a map defining:\n   * :data a map of meta and parsed hooks\n   * :permissions a vector of required permissions\n   * :errors a vector of errors maps triggered during parse"],"~$parse-meta",["^ ","^W",null,"^S",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",82,"^P",7,"^Q",82,"^R",17,"^X",["^Y",["^Z",["^Y",[["~$v"]]]]]],"^6","~$pluto.reader/parse-meta","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",17,"^11",["^Y",[["~$v"]]],"^12",null,"^13",["^Y",[null,null]],"^P",1,"^14",false,"^O",82,"^15","~$cljs.core/IMap","^Q",82,"^17",1,"^18",true,"^X",["^Y",["^Z",["^Y",[["~$v"]]]]]]],"~:cljs.spec/registry-ref",[["~:pluto.reader/meta",["^Y",["~$cljs.spec.alpha/keys","~:req-un",["~:pluto.reader/name","~:pluto.reader/description","~:pluto.reader/documentation"]]]],["~:pluto.reader/hooks","~$cljs.core/map?"]],"~:require-macros",["^ ","^F","^=","^=","^=","^<","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:description","^1Q","~:opt-un","~:ex-kind","^1O","~:errors","~:gfn","~:pred-exprs","~:keys-pred","~:cause","^1T","~:opt-keys","~:default","^1U","^6","~:events","~:hooks","~:pluto.reader.errors/missing-keys","~:req-specs","~$meta","^1R","~$cljs.core/contains?","^1V","~:pluto.reader.errors/reader-error","~:pluto.reader.errors/invalid-meta","~$%","~:documentation","^1P","~:req","~:pluto.reader.errors/invalid-value","~:components","~:capacities","~:req-keys","~$cljs.core/fn","~:opt-specs","~:pluto.reader.errors/invalid-key","~:pred-forms","~:pluto.reader.errors/message","~:hierarchy","~:queries","^1S","~:opt","~:data"]],"~:order",["^2>","^20","^2J","^25","^21","^2N","^2<","^2K","^27","^1O","^1P","^1Q","^1R","^1S","^1T","^1[","^22","^23","^24","^26","^2;","^2A","^2E","^2G","^2I","^2M","^6","^1Z","^2@","^2F","~$%","^1V","^2=","^1U","^29","^2B","^2H","^2L","^28","^2C","^2D","^2:","^2?"]],"^1=","Read time: string to data structure, only tags are replaced by records\n   Parse time: validate all the things, produce hiccup than can be used as is\n   # Read\n   # Parse\n     * properties/children are defined as symbol only, can be defined in element having fn semantic (view, event, ..), are unified at parse time\n     * conditionals are defined as list with symbol as first element. Replaced at parse time by references to corresponding reagent component\n     * let (lexical scoping). No shadowing support (error). Resolve in local scope then delegate to :outer (chain collected from parents)\n     * permissions required are accumulated at parse time\n   # Activate\n    * based on hooks, inject views / trigger events"]