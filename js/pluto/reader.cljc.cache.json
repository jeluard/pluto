["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$read"]],"~:name","~$pluto.reader","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$clojure.spec.alpha","~$cljs.spec.alpha","~$pluto.reader.errors","^>","~$cljs.tools.reader.edn","^?","~$pluto.reader.views","^@","~$errors","^>","~$clojure.tools.reader.edn","^?","^;","^;","~$hooks","~$pluto.reader.hooks","^D","^D","~$pluto.utils","^E","~$spec","^=","~$utils","^E","^=","^=","~$edn","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$valid-capacity?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","~:line",50,"~:column",7,"~:end-line",50,"~:end-column",22,"~:arglists",["~#list",["~$quote",["^U",[["~$m","~$k","~$v","^F"]]]]]],"^6","~$pluto.reader/valid-capacity?","~:variadic",false,"^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",22,"~:method-params",["^U",[["~$m","~$k","~$v","^F"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^Q",1,"^P",50,"^R",50,"~:max-fixed-arity",4,"~:fn-var",true,"^T",["^U",["^V",["^U",[["~$m","~$k","~$v","^F"]]]]]],"~$valid-element?",["^ ","^6","~$pluto.reader/valid-element?","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",58,"^Q",1,"^R",58,"^S",25,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",58,"^Q",11,"^R",58,"^S",25],"~:tag","~$cljs.core/MultiFn"],"~$reader-error",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",21,"^Q",7,"^R",21,"^S",19,"^T",["^U",["^V",["^U",[["~$ex"]]]]]],"^6","~$pluto.reader/reader-error","^X",false,"^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",19,"^Y",["^U",[["^17"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^P",21,"^R",21,"^10",1,"^11",true,"^T",["^U",["^V",["^U",[["^17"]]]]]],"~$mandatory-keys",["^ ","^6","~$pluto.reader/mandatory-keys","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",43,"^Q",1,"^R",43,"^S",20,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",43,"^Q",6,"^R",43,"^S",20],"^14","~$cljs.core/ISet"],"^5",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",27,"^Q",16,"^R",27,"^S",20,"~:export",true,"^T",["^U",["^V",["^U",[["~$s"]]]]],"~:doc","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * :data the extension definition as a map\n   * :errors a vector of errors map triggered during read"],"^6","~$pluto.reader/read","^X",false,"^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",20,"^Y",["^U",[["~$s"]]],"^Z",null,"^1<",true,"^[",["^U",[null,null]],"^Q",1,"^P",27,"^R",27,"^10",1,"^11",true,"^T",["^U",["^V",["^U",[["~$s"]]]]],"^1=","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * :data the extension definition as a map\n   * :errors a vector of errors map triggered during read"],"~$validate",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",89,"^Q",7,"^R",89,"^S",15,"^T",["^U",["^V",["^U",[[["^ ","~:keys",["~$capacities"]],"~$m"]]]]]],"^6","~$pluto.reader/validate","^X",false,"^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",15,"^Y",["^U",[["~$p__2114","~$m"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^P",89,"^R",89,"^10",2,"^11",true,"^T",["^U",["^V",["^U",[[["^ ","^1@",["^1A"]],"~$m"]]]]]],"~$valid-keys",["^ ","^6","~$pluto.reader/valid-keys","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",44,"^Q",1,"^R",44,"^S",16,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",44,"^Q",6,"^R",44,"^S",16],"^14","^1;"],"~$capacity?",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",46,"^Q",7,"^R",46,"^S",16,"^T",["^U",["^V",["^U",[["~$m","~$s"]]]]]],"^6","~$pluto.reader/capacity?","^X",false,"^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",16,"^Y",["^U",[["~$m","~$s"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^P",46,"^R",46,"^10",2,"^11",true,"^T",["^U",["^V",["^U",[["~$m","~$s"]]]]]],"~$parse",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",101,"^Q",16,"^R",101,"^S",21,"^1<",true,"^T",["^U",["^V",["^U",[["~$ctx","~$m"]]]]],"^1=","Parse an extension definition map as encapsulated in :data key of the map returned by read.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n\n   Returns a map defining:\n   * :data a map of meta and parsed hooks\n   * :permissions a vector of required permissions\n   * :errors a vector of errors maps triggered during parse"],"^6","~$pluto.reader/parse","^X",false,"^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",21,"^Y",["^U",[["^1I","~$m"]]],"^Z",null,"^1<",true,"^[",["^U",[null,null]],"^Q",1,"^P",101,"^R",101,"^10",2,"^11",true,"^T",["^U",["^V",["^U",[["^1I","~$m"]]]]],"^1=","Parse an extension definition map as encapsulated in :data key of the map returned by read.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n\n   Returns a map defining:\n   * :data a map of meta and parsed hooks\n   * :permissions a vector of required permissions\n   * :errors a vector of errors maps triggered during parse"],"~$parse-meta",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",96,"^Q",7,"^R",96,"^S",17,"^T",["^U",["^V",["^U",[["~$v"]]]]]],"^6","~$pluto.reader/parse-meta","^X",false,"^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",17,"^Y",["^U",[["~$v"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^P",96,"^R",96,"^10",1,"^11",true,"^T",["^U",["^V",["^U",[["~$v"]]]]]]],"~:cljs.spec/registry-ref",[["~:pluto.reader/queries","~$cljs.core/map?"],["~:pluto.reader/meta",["^U",["~$cljs.spec.alpha/keys","~:req-un",["~:pluto.reader/name","~:pluto.reader/description","~:pluto.reader/documentation"]]]],["~:pluto.reader/hooks","^1O"],["~:pluto.reader/events","^1O"]],"~:require-macros",["^ ","^F","^=","^=","^=","^<","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^1N","~:description","^1R","~:opt-un","~:ex-kind","^1P","~:errors","~:gfn","~:pred-exprs","~:keys-pred","~:cause","^1U","~:opt-keys","~:default","^1V","^6","~:events","~:hooks","~:pluto.reader.errors/missing-keys","~:req-specs","~$meta","^1S","~$cljs.core/contains?","^1O","~:pluto.reader.errors/reader-error","~:pluto.reader.errors/invalid-meta","^1W","~$%","~:documentation","^1Q","~:req","~:pluto.reader.errors/invalid-value","~:capacities","~:req-keys","~$cljs.core/fn","~:opt-specs","~:pluto.reader.errors/invalid-key","~:pred-forms","~:pluto.reader.errors/message","~:hierarchy","~:queries","^1T","~:opt","~:data"]],"~:order",["^2?","^21","^2J","^26","^22","^2N","^2=","^2C","^2H","^2K","^28","^1P","^1Q","^1R","^1S","^1T","^1U","^20","^23","^24","^25","^27","^2<","^2B","^2E","^2G","^2I","^2M","^6","^1[","^2A","^2F","~$%","^1O","^2>","^1V","^2:","^1N","^2L","^1W","^29","^2D","^2;","^2@"]],"^1=","Read time: string to data structure, only tags are replaced by records\n   Parse time: validate all the things, produce hiccup than can be used as is\n   # Read\n   # Parse\n     * properties/children are defined as symbol only, can be defined in element having fn semantic (view, event, ..), are unified at parse time\n     * conditionals are defined as list with symbol as first element. Replaced at parse time by references to corresponding reagent component\n     * let (lexical scoping). No shadowing support (error). Resolve in local scope then delegate to :outer (chain collected from parents)\n     * permissions required are accumulated at parse time\n   # Activate\n    * based on hooks, inject views / trigger events"]