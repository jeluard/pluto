["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$read"]],"~:name","~$pluto.reader","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$clojure.spec.alpha","~$cljs.spec.alpha","~$pluto.reader.errors","^>","~$cljs.tools.reader.edn","^?","~$pluto.reader.views","^@","~$errors","^>","~$clojure.tools.reader.edn","^?","^;","^;","~$hooks","~$pluto.reader.hooks","^D","^D","~$pluto.utils","^E","~$spec","^=","~$utils","^E","^=","^=","~$edn","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$reader-error",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","~:line",21,"~:column",7,"~:end-line",21,"~:end-column",19,"~:arglists",["~#list",["~$quote",["^U",[["~$ex"]]]]]],"^6","~$pluto.reader/reader-error","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",19,"~:method-params",["^U",[["^W"]]],"~:protocol-impl",null,"~:arglists-meta",["^U",[null,null]],"^Q",1,"~:variadic?",false,"^P",21,"~:ret-tag","~$any","^R",21,"~:max-fixed-arity",1,"~:fn-var",true,"^T",["^U",["^V",["^U",[["^W"]]]]]],"^5",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",27,"^Q",16,"^R",27,"^S",20,"~:export",true,"^T",["^U",["^V",["^U",[["~$s"]]]]],"~:doc","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * :data the extension definition as a map\n   * :errors a vector of errors map triggered during read"],"^6","~$pluto.reader/read","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",20,"^Y",["^U",[["~$s"]]],"^Z",null,"^15",true,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",27,"^R",27,"^13",1,"^14",true,"^T",["^U",["^V",["^U",[["~$s"]]]]],"^16","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * :data the extension definition as a map\n   * :errors a vector of errors map triggered during read"],"~$mandatory-keys",["^ ","^6","~$pluto.reader/mandatory-keys","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",43,"^Q",1,"^R",43,"^S",20,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",43,"^Q",6,"^R",43,"^S",20],"~:tag","~$cljs.core/ISet"],"~$valid-keys",["^ ","^6","~$pluto.reader/valid-keys","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",44,"^Q",1,"^R",44,"^S",16,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",44,"^Q",6,"^R",44,"^S",16],"^1:","^1;"],"~$capacity?",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",46,"^Q",7,"^R",46,"^S",16,"^T",["^U",["^V",["^U",[["~$m","~$s"]]]]]],"^6","~$pluto.reader/capacity?","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",16,"^Y",["^U",[["~$m","~$s"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",46,"^11","^12","^R",46,"^13",2,"^14",true,"^T",["^U",["^V",["^U",[["~$m","~$s"]]]]]],"~$valid-element?",["^ ","^6","~$pluto.reader/valid-element?","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",50,"^Q",1,"^R",50,"^S",25,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",50,"^Q",11,"^R",50,"^S",25],"^1:","~$cljs.core/MultiFn"],"~$validate",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",73,"^Q",7,"^R",73,"^S",15,"^T",["^U",["^V",["^U",[[["^ ","~:keys",["~$capacities"]],"~$m"]]]]]],"^6","~$pluto.reader/validate","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",15,"^Y",["^U",[["~$p__1411","~$m"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",73,"^11",["^4",[null,"^12"]],"^R",73,"^13",2,"^14",true,"^T",["^U",["^V",["^U",[[["^ ","^1D",["^1E"]],"~$m"]]]]]],"~$parse-meta",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",80,"^Q",7,"^R",80,"^S",17,"^T",["^U",["^V",["^U",[["~$v"]]]]]],"^6","~$pluto.reader/parse-meta","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",17,"^Y",["^U",[["~$v"]]],"^Z",null,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",80,"^11","~$cljs.core/IMap","^R",80,"^13",1,"^14",true,"^T",["^U",["^V",["^U",[["~$v"]]]]]],"~$parse",["^ ","^M",null,"^N",["^ ","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^P",85,"^Q",16,"^R",85,"^S",21,"^15",true,"^T",["^U",["^V",["^U",[["~$ctx","~$m"]]]]],"^16","Parse an extension definition map as encapsulated in :data key of the map returned by read.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env` [optional] a map of extension environment, may contain for example id of extension {:id 'id'}, will be\n   * provided as second parameter into event and query handlers\n\n   Returns a map defining:\n   * :data a map of meta and parsed hooks\n   * :permissions a vector of required permissions\n   * :errors a vector of errors maps triggered during parse"],"^6","~$pluto.reader/parse","^O","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^S",21,"^Y",["^U",[["^1L","~$m"]]],"^Z",null,"^15",true,"^[",["^U",[null,null]],"^Q",1,"^10",false,"^P",85,"^11","^12","^R",85,"^13",2,"^14",true,"^T",["^U",["^V",["^U",[["^1L","~$m"]]]]],"^16","Parse an extension definition map as encapsulated in :data key of the map returned by read.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env` [optional] a map of extension environment, may contain for example id of extension {:id 'id'}, will be\n   * provided as second parameter into event and query handlers\n\n   Returns a map defining:\n   * :data a map of meta and parsed hooks\n   * :permissions a vector of required permissions\n   * :errors a vector of errors maps triggered during parse"]],"~:cljs.spec/registry-ref",[["~:pluto.reader/meta",["^U",["~$cljs.spec.alpha/keys","~:req-un",["~:pluto.reader/name","~:pluto.reader/description","~:pluto.reader/documentation"]]]],["~:pluto.reader/hooks","~$cljs.core/map?"]],"~:require-macros",["^ ","^F","^=","^=","^=","^<","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:description","^1Q","~:opt-un","~:ex-kind","^1O","~:errors","~:gfn","~:pred-exprs","~:keys-pred","~:cause","^1T","~:opt-keys","~:default","^1U","^6","~:events","~:hooks","~:pluto.reader.errors/missing-keys","~:req-specs","~$meta","^1R","~$cljs.core/contains?","^1V","~:pluto.reader.errors/reader-error","~:pluto.reader.errors/invalid-meta","~$%","~:documentation","^1P","~:req","~:pluto.reader.errors/invalid-value","~:capacities","~:req-keys","~$cljs.core/fn","~:opt-specs","~:pluto.reader.errors/invalid-key","~:pred-forms","~:pluto.reader.errors/message","~:hierarchy","~:queries","^1S","~:opt","~:data"]],"~:order",["^2>","^20","^2I","^25","^21","^2M","^2<","^2J","^27","^1O","^1P","^1Q","^1R","^1S","^1T","^1[","^22","^23","^24","^26","^2;","^2A","^2D","^2F","^2H","^2L","^6","^1Z","^2@","^2E","~$%","^1V","^2=","^1U","^29","^2B","^2G","^2K","^28","^2C","^2:","^2?"]],"^16","Read time: string to data structure, only tags are replaced by records\n   Parse time: validate all the things, produce hiccup than can be used as is\n   # Read\n   # Parse\n     * properties/children are defined as symbol only, can be defined in element having fn semantic (view, event, ..), are unified at parse time\n     * conditionals are defined as list with symbol as first element. Replaced at parse time by references to corresponding reagent component\n     * let (lexical scoping). No shadowing support (error). Resolve in local scope then delegate to :outer (chain collected from parents)\n     * permissions required are accumulated at parse time\n   # Activate\n    * based on hooks, inject views / trigger events"]