["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$read"]],"~:name","~$pluto.reader","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","~$clojure.spec.alpha","~$cljs.spec.alpha","~$pluto.reader.errors","^>","~$cljs.tools.reader","^?","~$errors","^>","^;","^;","~$hooks","~$pluto.reader.hooks","~$clojure.tools.reader","^?","^B","^B","~$pluto.utils","^D","~$spec","^=","~$utils","^D","^=","^=","~$reader","^?"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$valid-capacity?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","~:line",52,"~:column",7,"~:end-line",52,"~:end-column",22,"~:arglists",["~#list",["~$quote",["^T",[["~$m","~$k","~$v","^E"]]]]]],"^6","~$pluto.reader/valid-capacity?","~:variadic",false,"^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",22,"~:method-params",["^T",[["~$m","~$k","~$v","^E"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^P",1,"^O",52,"^Q",52,"~:max-fixed-arity",4,"~:fn-var",true,"^S",["^T",["^U",["^T",[["~$m","~$k","~$v","^E"]]]]]],"~$valid-element?",["^ ","^6","~$pluto.reader/valid-element?","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",60,"^P",1,"^Q",60,"^R",25,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",60,"^P",11,"^Q",60,"^R",25],"~:tag","~$cljs.core/MultiFn"],"~$reader-error",["^ ","^L",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",20,"^P",7,"^Q",20,"^R",19,"^S",["^T",["^U",["^T",[["~$ex"]]]]]],"^6","~$pluto.reader/reader-error","^W",false,"^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",19,"^X",["^T",[["^16"]]],"^Y",null,"^Z",["^T",[null,null]],"^P",1,"^O",20,"^Q",20,"^[",1,"^10",true,"^S",["^T",["^U",["^T",[["^16"]]]]]],"~$mandatory-keys",["^ ","^6","~$pluto.reader/mandatory-keys","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",45,"^P",1,"^Q",45,"^R",20,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",45,"^P",6,"^Q",45,"^R",20],"^13","~$cljs.core/ISet"],"^5",["^ ","^L",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",26,"^P",7,"^Q",26,"^R",11,"^S",["^T",["^U",["^T",[["~$s"]]]]],"~:doc","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * :data the extension definition as a map\n   * :errors a vector of errors map triggered during read"],"^6","~$pluto.reader/read","^W",false,"^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",11,"^X",["^T",[["~$s"]]],"^Y",null,"^Z",["^T",[null,null]],"^P",1,"^O",26,"^Q",26,"^[",1,"^10",true,"^S",["^T",["^U",["^T",[["~$s"]]]]],"^1;","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * :data the extension definition as a map\n   * :errors a vector of errors map triggered during read"],"~$validate",["^ ","^L",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",95,"^P",7,"^Q",95,"^R",15,"^S",["^T",["^U",["^T",[[["^ ","~:keys",["~$capacities"]],"~$m"]]]]]],"^6","~$pluto.reader/validate","^W",false,"^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",15,"^X",["^T",[["~$p__2309","~$m"]]],"^Y",null,"^Z",["^T",[null,null]],"^P",1,"^O",95,"^Q",95,"^[",2,"^10",true,"^S",["^T",["^U",["^T",[[["^ ","^1>",["^1?"]],"~$m"]]]]]],"~$valid-keys",["^ ","^6","~$pluto.reader/valid-keys","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",46,"^P",1,"^Q",46,"^R",16,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",46,"^P",6,"^Q",46,"^R",16],"^13","^1:"],"~$capacity?",["^ ","^L",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",48,"^P",7,"^Q",48,"^R",16,"^S",["^T",["^U",["^T",[["~$m","~$s"]]]]]],"^6","~$pluto.reader/capacity?","^W",false,"^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",16,"^X",["^T",[["~$m","~$s"]]],"^Y",null,"^Z",["^T",[null,null]],"^P",1,"^O",48,"^Q",48,"^[",2,"^10",true,"^S",["^T",["^U",["^T",[["~$m","~$s"]]]]]],"~$parse",["^ ","^L",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",107,"^P",7,"^Q",107,"^R",12,"^S",["^T",["^U",["^T",[["~$opts","~$m"]]]]],"^1;","Parse an extension definition map as encapsulated in :data key of the map returned by read.\n   `opts` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n\n   Returns a map defining:\n   * :data a map of meta and parsed hooks\n   * :permissions a vector of required permissions\n   * :errors a vector of errors maps triggered during parse"],"^6","~$pluto.reader/parse","^W",false,"^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",12,"^X",["^T",[["^1G","~$m"]]],"^Y",null,"^Z",["^T",[null,null]],"^P",1,"^O",107,"^Q",107,"^[",2,"^10",true,"^S",["^T",["^U",["^T",[["^1G","~$m"]]]]],"^1;","Parse an extension definition map as encapsulated in :data key of the map returned by read.\n   `opts` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n\n   Returns a map defining:\n   * :data a map of meta and parsed hooks\n   * :permissions a vector of required permissions\n   * :errors a vector of errors maps triggered during parse"],"~$parse-meta",["^ ","^L",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^O",102,"^P",7,"^Q",102,"^R",17,"^S",["^T",["^U",["^T",[["~$v"]]]]]],"^6","~$pluto.reader/parse-meta","^W",false,"^N","/home/julien/Documents/Projects/pluto/src/pluto/reader.cljc","^R",17,"^X",["^T",[["~$v"]]],"^Y",null,"^Z",["^T",[null,null]],"^P",1,"^O",102,"^Q",102,"^[",1,"^10",true,"^S",["^T",["^U",["^T",[["~$v"]]]]]]],"~:cljs.spec/registry-ref",[["~:pluto.reader/queries","~$cljs.core/map?"],["~:pluto.reader/meta",["^T",["~$cljs.spec.alpha/keys","~:req-un",["~:pluto.reader/name","~:pluto.reader/description","~:pluto.reader/documentation"]]]],["~:pluto.reader/hooks","^1M"],["~:pluto.reader/events","^1M"]],"~:require-macros",["^ ","^E","^=","^=","^=","^<","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^1L","~:description","^1P","~:opt-un","~:ex-kind","^1N","~:errors","~:gfn","~:pred-exprs","~:keys-pred","~:cause","^1S","~:opt-keys","~:default","^1T","^6","~:events","~:hooks","~:pluto.reader.errors/missing-keys","~:req-specs","~$meta","^1Q","~$cljs.core/contains?","^1M","~:pluto.reader.errors/reader-error","~:pluto.reader.errors/invalid-meta","^1U","~$%","~:documentation","^1O","~:req","~:pluto.reader.errors/invalid-value","~:capacities","~:req-keys","~$cljs.core/fn","~:opt-specs","~:pluto.reader.errors/invalid-key","~:pred-forms","~:pluto.reader.errors/message","~:hierarchy","~:queries","^1R","~:opt","~:data"]],"~:order",["^2=","^1[","^2H","^24","^20","^2L","^2;","^2A","^2F","^2I","^26","^1N","^1O","^1P","^1Q","^1R","^1S","^1Z","^21","^22","^23","^25","^2:","^2@","^2C","^2E","^2G","^2K","^6","^1Y","^2?","^2D","~$%","^1M","^2<","^2>","^1T","^28","^1L","^2J","^1U","^27","^2B","^29"]],"^1;","Read time: string to data structure, only tags are replaced by records\n   Parse time: validate all the things, produce hiccup than can be used as is\n   # Read\n   # Parse\n     * properties/children are defined as symbol only, can be defined in element having fn semantic (view, event, ..), are unified at parse time\n     * conditionals are defined as list with symbol as first element. Replaced at parse time by references to corresponding reagent component\n     * let (lexical scoping). No shadowing support (error). Resolve in local scope then delegate to :outer (chain collected from parents)\n     * permissions required are accumulated at parse time\n   # Activate\n    * based on hooks, inject views / trigger events"]