["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$resolve"]],"~:name","~$pluto.reader.reference","~:imports",null,"~:requires",["^ ","~$errors","~$pluto.reader.errors","^;","^;"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$reference?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^H",[["~$o"]]]]],"~:doc","Return true if argument is a reference"],"^6","~$pluto.reader.reference/reference?","~:variadic",false,"^B","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","^F",17,"~:method-params",["^H",[["~$o"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^D",1,"^C",5,"^E",5,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return true if argument is a reference"],"~$reference->symbol",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","^C",10,"^D",7,"^E",10,"^F",24,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return the symbol pointed by the reference\n\n   ```clojure\n   (= 'some.ref (reference->name 'views/some.ref))\n   ```"],"^6","~$pluto.reader.reference/reference->symbol","^L",false,"^B","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","^F",24,"^M",["^H",[["~$o"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",10,"^E",10,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return the symbol pointed by the reference\n\n   ```clojure\n   (= 'some.ref (reference->name 'views/some.ref))\n   ```"],"~$ns->type",["^ ","^6","~$pluto.reader.reference/ns->type","^B","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","^C",20,"^D",1,"^E",20,"^F",14,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","^C",20,"^D",6,"^E",20,"^F",14],"~:tag","~$cljs.core/IMap"],"~$reference->type",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","^C",22,"^D",7,"^E",22,"^F",22,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return the type of a reference\n\n   ```clojure\n   (= :view (reference->type 'views/some.ref))\n   ```"],"^6","~$pluto.reader.reference/reference->type","^L",false,"^B","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","^F",22,"^M",["^H",[["~$o"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",22,"^E",22,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return the type of a reference\n\n   ```clojure\n   (= :view (reference->type 'views/some.ref))\n   ```"],"^5",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","^C",33,"^D",7,"^E",33,"^F",14,"^G",["^H",["^I",["^H",[["~$m",["^ ","~:keys",["~$name","~$type","~$optional?"]],"~$hook"]]]]],"^J","Resolve a reference defined by a hook\n\n   ```clojure\n   (= {:data \"view\"} (resolve {'views/id \"view\"} {:name :view :type :view} {:view 'views/id}))\n   ```"],"^6","~$pluto.reader.reference/resolve","^L",false,"^B","/home/julien/Documents/Projects/pluto-doc/src/pluto/reader/reference.cljc","^F",14,"^M",["^H",[["~$m","~$p__7198","^12"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",33,"^E",33,"^P",3,"^Q",true,"^G",["^H",["^I",["^H",[["~$m",["^ ","^Z",["^[","^10","^11"]],"^12"]]]]],"^J","Resolve a reference defined by a hook\n\n   ```clojure\n   (= {:data \"view\"} (resolve {'views/id \"view\"} {:name :view :type :view} {:view 'views/id}))\n   ```"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:errors","~:pluto.reader.errors/missing-property-name","^6","~:type","~:optional?","~:event","~:pluto.reader.errors/missing-property-value","~:pluto.reader.errors/invalid-type","~:query","~:view","~:data"]],"~:order",["^1A","^1@","^1=","^6","^1;","^1<","^1B","^19","^1>","^1?","^1:"]],"^J",null]