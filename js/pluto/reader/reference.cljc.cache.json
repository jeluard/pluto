["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$resolve"]],"~:name","~$pluto.reader.reference","~:imports",null,"~:requires",["^ ","~$errors","~$pluto.reader.errors","^;","^;"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$reference?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^H",[["~$o"]]]]],"~:doc","Return true if argument is a reference"],"^6","~$pluto.reader.reference/reference?","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^F",17,"~:method-params",["^H",[["~$o"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^D",1,"~:variadic?",false,"^C",5,"~:ret-tag","~$boolean","^E",5,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return true if argument is a reference"],"~$reference->symbol",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",13,"^D",7,"^E",13,"^F",24,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return the symbol pointed by the reference\n\n   ```clojure\n   (= 'some.ref (reference->symbol ['some.ref]))\n   ```"],"^6","~$pluto.reader.reference/reference->symbol","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^F",24,"^L",["^H",[["~$o"]]],"^M",null,"^N",["^H",[null,null]],"^D",1,"^O",false,"^C",13,"^P",["^4",["~$any","~$clj-nil"]],"^E",13,"^R",1,"^S",true,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return the symbol pointed by the reference\n\n   ```clojure\n   (= 'some.ref (reference->symbol ['some.ref]))\n   ```"],"~$type->ns",["^ ","^6","~$pluto.reader.reference/type->ns","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",23,"^D",1,"^E",23,"^F",14,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",23,"^D",6,"^E",23,"^F",14],"~:tag","~$cljs.core/IMap"],"~$type->capacity",["^ ","^6","~$pluto.reader.reference/type->capacity","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",24,"^D",1,"^E",24,"^F",20,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",24,"^D",6,"^E",24,"^F",20],"^Z","^["],"~$resolve-symbol",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",26,"^D",8,"^E",26,"^F",22,"~:private",true,"^G",["^H",["^I",["^H",[["~$ctx","~$ext","~$type","~$ns","~$s"]]]]],"^J","Resolve a symbol first via the extension definition then via the host ctx."],"^13",true,"^6","~$pluto.reader.reference/resolve-symbol","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^F",22,"^L",["^H",[["^14","^15","^16","^17","~$s"]]],"^M",null,"^N",["^H",[null,null]],"^D",1,"^O",false,"^C",26,"^P","^V","^E",26,"^R",5,"^S",true,"^G",["^H",["^I",["^H",[["^14","^15","^16","^17","~$s"]]]]],"^J","Resolve a symbol first via the extension definition then via the host ctx."],"~$valid-reference?",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",32,"^D",7,"^E",32,"^F",23,"^G",["^H",["^I",["^H",[[["~$name","~$arguments","~:as","~$value"]]]]]]],"^6","~$pluto.reader.reference/valid-reference?","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^F",23,"^L",["^H",[["~$p__1222"]]],"^M",null,"^N",["^H",[null,null]],"^D",1,"^O",false,"^C",32,"^P","^Q","^E",32,"^R",1,"^S",true,"^G",["^H",["^I",["^H",[[["^1:","^1;","^1<","^1="]]]]]]],"^5",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",37,"^D",7,"^E",37,"^F",14,"^G",["^H",["^I",["^H",[["^14","^15","^16","^1="]]]]],"^J","Resolve a reference defined by a hook\n\n   ```clojure\n   (= {:data \"view\"} (resolve {} {'views/id \"view\"} :view ['id]))\n   ```"],"^6","~$pluto.reader.reference/resolve","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^F",14,"^L",["^H",[["^14","^15","^16","^1="]]],"^M",null,"^N",["^H",[null,null]],"^D",1,"^O",false,"^C",37,"^P","^[","^E",37,"^R",4,"^S",true,"^G",["^H",["^I",["^H",[["^14","^15","^16","^1="]]]]],"^J","Resolve a reference defined by a hook\n\n   ```clojure\n   (= {:data \"view\"} (resolve {} {'views/id \"view\"} :view ['id]))\n   ```"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:errors","~:pluto.reader.errors/invalid-reference","~:events","~:value","~:pluto.reader.errors/unknown-reference-type","~:type","~:event","~:components","~:capacities","~:query","~:queries","~:pluto.reader.errors/unknown-reference","~:view","~:data"]],"~:order",["^1Q","^1N","^1K","^1L","^1O","^1G","^1M","^1H","^1R","^1E","^1P","^1J","^1I","^1F"]],"^J",null]