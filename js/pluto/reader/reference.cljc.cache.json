["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$resolve"]],"~:name","~$pluto.reader.reference","~:imports",null,"~:requires",["^ ","~$errors","~$pluto.reader.errors","^;","^;"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$reference?",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","~:line",5,"~:column",7,"~:end-line",5,"~:end-column",17,"~:arglists",["~#list",["~$quote",["^H",[["~$o"]]]]],"~:doc","Return true if argument is a reference"],"^6","~$pluto.reader.reference/reference?","~:variadic",false,"^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^F",17,"~:method-params",["^H",[["~$o"]]],"~:protocol-impl",null,"~:arglists-meta",["^H",[null,null]],"^D",1,"^C",5,"^E",5,"~:max-fixed-arity",1,"~:fn-var",true,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return true if argument is a reference"],"~$reference->symbol",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",13,"^D",7,"^E",13,"^F",24,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return the symbol pointed by the reference\n\n   ```clojure\n   (= 'some.ref (reference->symbol ['some.ref]))\n   ```"],"^6","~$pluto.reader.reference/reference->symbol","^L",false,"^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^F",24,"^M",["^H",[["~$o"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",13,"^E",13,"^P",1,"^Q",true,"^G",["^H",["^I",["^H",[["~$o"]]]]],"^J","Return the symbol pointed by the reference\n\n   ```clojure\n   (= 'some.ref (reference->symbol ['some.ref]))\n   ```"],"~$type->ns",["^ ","^6","~$pluto.reader.reference/type->ns","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",23,"^D",1,"^E",23,"^F",14,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",23,"^D",6,"^E",23,"^F",14],"~:tag","~$cljs.core/IMap"],"~$resolve-symbol",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",25,"^D",8,"^E",25,"^F",22,"~:private",true,"^G",["^H",["^I",["^H",[["~$ctx","~$ext","~$ns","~$s"]]]]],"^J","Resolve a symbol first via the extension definition then via the host ctx."],"^Y",true,"^6","~$pluto.reader.reference/resolve-symbol","^L",false,"^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^F",22,"^M",["^H",[["^Z","^[","^10","~$s"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",25,"^E",25,"^P",4,"^Q",true,"^G",["^H",["^I",["^H",[["^Z","^[","^10","~$s"]]]]],"^J","Resolve a symbol first via the extension definition then via the host ctx."],"^5",["^ ","^@",null,"^A",["^ ","^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^C",31,"^D",7,"^E",31,"^F",14,"^G",["^H",["^I",["^H",[["^Z","^[","~$type","~$value"]]]]],"^J","Resolve a reference defined by a hook\n\n   ```clojure\n   (= {:data \"view\"} (resolve {'views/id \"view\"} :view ['id]))\n   ```"],"^6","~$pluto.reader.reference/resolve","^L",false,"^B","/home/julien/Documents/Projects/pluto/src/pluto/reader/reference.cljc","^F",14,"^M",["^H",[["^Z","^[","^12","^13"]]],"^N",null,"^O",["^H",[null,null]],"^D",1,"^C",31,"^E",31,"^P",4,"^Q",true,"^G",["^H",["^I",["^H",[["^Z","^[","^12","^13"]]]]],"^J","Resolve a reference defined by a hook\n\n   ```clojure\n   (= {:data \"view\"} (resolve {'views/id \"view\"} :view ['id]))\n   ```"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:errors","~:pluto.reader.errors/invalid-reference","~:value","~:pluto.reader.errors/unknown-reference-type","~:event","~:components","~:capacities","~:query","~:pluto.reader.errors/unknown-reference","~:view","~:data"]],"~:order",["^1B","^1@","^1=","^1?","^1>","^1;","^1C","^19","^1A","^1<","^1:"]],"^J",null]