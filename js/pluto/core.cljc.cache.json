["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$read"]],"~:name","~$pluto.core","~:imports",null,"~:requires",["^ ","~$pluto.reader.errors","^:","~$pluto.reader.events","^;","~$cljs.tools.reader.edn","^<","~$pluto.reader.views","^=","~$views","^=","~$errors","^:","~$clojure.tools.reader.edn","^<","~$events","^;","~$string","~$clojure.string","~$types","~$pluto.reader.types","~$pluto.utils","^F","^E","^E","~$utils","^F","^C","^C","~$edn","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$parse-value",["^ ","~:meta",["^ ","~:file","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","~:line",36,"~:column",11,"~:end-line",36,"~:end-column",22,"~:doc","Parse an extension value from its type"],"^6","~$pluto.core/parse-value","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",22,"^P",1,"^O",36,"^Q",36,"~:tag","~$cljs.core/MultiFn","^S","Parse an extension value from its type"],"~$reader-error",["^ ","~:protocol-inline",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",12,"^P",8,"^Q",12,"^R",20,"~:private",true,"~:arglists",["~#list",["~$quote",["^[",[["~$ex"]]]]]],"^Y",true,"^6","~$pluto.core/reader-error","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",20,"~:method-params",["^[",[["^11"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^P",1,"~:variadic?",false,"^O",12,"~:ret-tag","~$any","^Q",12,"~:max-fixed-arity",1,"~:fn-var",true,"^Z",["^[",["^10",["^[",[["^11"]]]]]],"~$accumulate",["^ ","^X",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",70,"^P",8,"^Q",70,"^R",18,"^Y",true,"^Z",["^[",["^10",["^[",[["~$ctx","~$ext","~$acc","~$k","~$v"]]]]],"^S","Accumulates the result of parsed primitives.\n   Shape is: {:data {'primitive data} :errors {'primitive errors} :permissions #{}}\n   If returned map contains :errors, :data is ignored."],"^Y",true,"^6","~$pluto.core/accumulate","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",18,"^13",["^[",[["^1<","^1=","^1>","~$k","~$v"]]],"^14",null,"^15",["^[",[null,null]],"^P",1,"^16",false,"^O",70,"^17","^18","^Q",70,"^19",5,"^1:",true,"^Z",["^[",["^10",["^[",[["^1<","^1=","^1>","~$k","~$v"]]]]],"^S","Accumulates the result of parsed primitives.\n   Shape is: {:data {'primitive data} :errors {'primitive errors} :permissions #{}}\n   If returned map contains :errors, :data is ignored."],"^5",["^ ","^X",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",18,"^P",7,"^Q",18,"^R",11,"^Z",["^[",["^10",["^[",[["~$s"]]]]],"^S","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * `:data` the extension definition as a map\n   * `:errors` a vector of errors map triggered during read"],"^6","~$pluto.core/read","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",11,"^13",["^[",[["~$s"]]],"^14",null,"^15",["^[",[null,null]],"^P",1,"^16",false,"^O",18,"^Q",18,"^19",1,"^1:",true,"^Z",["^[",["^10",["^[",[["~$s"]]]]],"^S","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * `:data` the extension definition as a map\n   * `:errors` a vector of errors map triggered during read"],"~$hook-type",["^ ","^X",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",55,"^P",8,"^Q",55,"^R",17,"^Y",true,"^Z",["^[",["^10",["^[",[["~$s"]]]]],"^S","Type of a hook\n   e.g. (= \"chat.command\" (hook-type 'chat.command.hello-world))"],"^Y",true,"^6","~$pluto.core/hook-type","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",17,"^13",["^[",[["~$s"]]],"^14",null,"^15",["^[",[null,null]],"^P",1,"^16",false,"^O",55,"^17",["^4",["^18","~$clj-nil"]],"^Q",55,"^19",1,"^1:",true,"^Z",["^[",["^10",["^[",[["~$s"]]]]],"^S","Type of a hook\n   e.g. (= \"chat.command\" (hook-type 'chat.command.hello-world))"],"~$order-comparator",["^ ","^X",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",80,"^P",8,"^Q",80,"^R",24,"^Y",true,"^Z",["^[",["^10",["^[",[["~$k1","~$k2"]]]]],"^S","Compares keys based on `order`"],"^Y",true,"^6","~$pluto.core/order-comparator","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",24,"^13",["^[",[["^1E","^1F"]]],"^14",null,"^15",["^[",[null,null]],"^P",1,"^16",false,"^O",80,"^17","~$number","^Q",80,"^19",2,"^1:",true,"^Z",["^[",["^10",["^[",[["^1E","^1F"]]]]],"^S","Compares keys based on `order`"],"~$capacity?",["^ ","^X",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",40,"^P",8,"^Q",40,"^R",17,"^Y",true,"^Z",["^[",["^10",["^[",[["~$m","~$s"]]]]]],"^Y",true,"^6","~$pluto.core/capacity?","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",17,"^13",["^[",[["~$m","~$s"]]],"^14",null,"^15",["^[",[null,null]],"^P",1,"^16",false,"^O",40,"^17","^18","^Q",40,"^19",2,"^1:",true,"^Z",["^[",["^10",["^[",[["~$m","~$s"]]]]]],"~$parse",["^ ","^X",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",89,"^P",7,"^Q",89,"^R",12,"^Z",["^[",["^10",["^[",[["^1<","^1="]]]]],"^S","Parse an extension definition map as encapsulated in :data key of the map returned by `read`.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env`        a map of extension environment, will be provided as second parameter into event and query handlers\n\n   `env` is a map defining:\n   * `logger`     [optional] a function that will be passed details about runtime extension execution (event fired, query values updated, ..): {:type :event :name 'my-event :properties {}}\n\n   Returns the input map modified so that values have been parsed into:\n   * `:data`        the result of parsing\n   * `:permissions` a vector of required permissions\n   * `:errors`      a vector of errors maps triggered during the parsing\n\n   If `errors` is not empty `data` will not be available.\n\n   e.g.\n\n   {'view/a {:data ..\n             :permissions ..}\n\n    'view/b {:errors []}}\n\n   or\n\n   {:data        {'view/a (fn [o] [text \"hello\"])}\n    :permissions {'view/a #{}}"],"^6","~$pluto.core/parse","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",12,"^13",["^[",[["^1<","^1="]]],"^14",null,"^15",["^[",[null,null]],"^P",1,"^16",false,"^O",89,"^17",["^4",[null,"^18"]],"^Q",89,"^19",2,"^1:",true,"^Z",["^[",["^10",["^[",[["^1<","^1="]]]]],"^S","Parse an extension definition map as encapsulated in :data key of the map returned by `read`.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env`        a map of extension environment, will be provided as second parameter into event and query handlers\n\n   `env` is a map defining:\n   * `logger`     [optional] a function that will be passed details about runtime extension execution (event fired, query values updated, ..): {:type :event :name 'my-event :properties {}}\n\n   Returns the input map modified so that values have been parsed into:\n   * `:data`        the result of parsing\n   * `:permissions` a vector of required permissions\n   * `:errors`      a vector of errors maps triggered during the parsing\n\n   If `errors` is not empty `data` will not be available.\n\n   e.g.\n\n   {'view/a {:data ..\n             :permissions ..}\n\n    'view/b {:errors []}}\n\n   or\n\n   {:data        {'view/a (fn [o] [text \"hello\"])}\n    :permissions {'view/a #{}}"],"~$parse-value-with",["^ ","^X",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",44,"^P",7,"^Q",44,"^R",23,"^Z",["^[",["^10",["^[",[["~$capacities","~$t","~$k","~$f"]]]]]],"^6","~$pluto.core/parse-value-with","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",23,"^13",["^[",[["^1N","~$t","~$k","~$f"]]],"^14",null,"^15",["^[",[null,null]],"^P",1,"^16",false,"^O",44,"^17",["^4",["~$cljs.core/IVector","^18"]],"^Q",44,"^19",4,"^1:",true,"^Z",["^[",["^10",["^[",[["^1N","~$t","~$k","~$f"]]]]]],"~$order",["^ ","^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",78,"^P",14,"^Q",78,"^R",19,"~:const",true],"^6","~$pluto.core/order","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",19,"~:const-expr",["^ ","~:op","~:vector","~:env",["^ ","~:context","~:expr"],"~:form",["events","queries","views","hooks"],"~:items",[["^ ","^1U","^1R","~:val","events","^1W",["^ ","^1X","^1Y"],"^1Z","events","^U","^B"],["^ ","^1U","^1R","^20","queries","^1W",["^ ","^1X","^1Y"],"^1Z","queries","^U","^B"],["^ ","^1U","^1R","^20","views","^1W",["^ ","^1X","^1Y"],"^1Z","views","^U","^B"],["^ ","^1U","^1R","^20","hooks","^1W",["^ ","^1X","^1Y"],"^1Z","hooks","^U","^B"]],"~:children",["^1["],"^U","^1P"],"^P",1,"^1R",true,"^O",78,"^Q",78,"^U","^1P"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:properties","~:ex-kind","~:errors","~:cause","~:pluto.reader.errors/existing-key","~:default","~:events","~:hooks","~$meta","~:pluto.reader.errors/reader-error","~:components","~:capacities","~:pluto.reader.errors/invalid-key","~:pluto.reader.errors/message","~:hierarchy","~:data"]],"~:order",["^2?","^27","^2C","^29","^28","^2E","^2D","^2;","^2:","^2A","^2@","^2<","^2=","^26","^2B","^2>"]],"^S","Main pluto namespace entry point."]