["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$read"]],"~:name","~$pluto.core","~:imports",null,"~:requires",["^ ","~$pluto.reader.errors","^:","~$pluto.reader.events","^;","~$pluto.reader.views","^<","~$views","^<","~$errors","^:","~$events","^;","~$string","~$clojure.string","~$types","~$pluto.reader.types","~$pluto.utils","^D","^C","^C","~$clojure.edn","^E","~$utils","^D","^A","^A","~$edn","^E"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$parse-value",["^ ","~:meta",["^ ","~:file","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","~:line",32,"~:column",11,"~:end-line",32,"~:end-column",22,"~:doc","Parse an extension value from its type"],"^6","~$pluto.core/parse-value","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",22,"^O",1,"^N",32,"^P",32,"~:tag","~$cljs.core/MultiFn","^R","Parse an extension value from its type"],"~$reader-error",["^ ","~:protocol-inline",null,"^L",["^ ","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^N",12,"^O",8,"^P",12,"^Q",20,"~:private",true,"~:arglists",["~#list",["~$quote",["^Z",[["~$ex"]]]]]],"^X",true,"^6","~$pluto.core/reader-error","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",20,"~:method-params",["^Z",[["^10"]]],"~:protocol-impl",null,"~:arglists-meta",["^Z",[null,null]],"^O",1,"~:variadic?",false,"^N",12,"~:ret-tag",["^4",["~$clj","~$any"]],"^P",12,"~:max-fixed-arity",1,"~:fn-var",true,"^Y",["^Z",["^[",["^Z",[["^10"]]]]]],"~$accumulate",["^ ","^W",null,"^L",["^ ","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^N",66,"^O",8,"^P",66,"^Q",18,"^X",true,"^Y",["^Z",["^[",["^Z",[["~$ctx","~$ext","~$acc","~$k","~$v"]]]]],"^R","Accumulates the result of parsed primitives.\n   Shape is: {:data {'primitive data} :errors {'primitive errors} :permissions #{}}\n   If returned map contains :errors, :data is ignored."],"^X",true,"^6","~$pluto.core/accumulate","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",18,"^12",["^Z",[["^1<","^1=","^1>","~$k","~$v"]]],"^13",null,"^14",["^Z",[null,null]],"^O",1,"^15",false,"^N",66,"^16",["^4",["^17","^18"]],"^P",66,"^19",5,"^1:",true,"^Y",["^Z",["^[",["^Z",[["^1<","^1=","^1>","~$k","~$v"]]]]],"^R","Accumulates the result of parsed primitives.\n   Shape is: {:data {'primitive data} :errors {'primitive errors} :permissions #{}}\n   If returned map contains :errors, :data is ignored."],"^5",["^ ","^W",null,"^L",["^ ","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^N",18,"^O",7,"^P",18,"^Q",11,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^R","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * `:data` the extension definition as a map\n   * `:errors` a vector of errors map triggered during read"],"^6","~$pluto.core/read","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",11,"^12",["^Z",[["~$s"]]],"^13",null,"^14",["^Z",[null,null]],"^O",1,"^15",false,"^N",18,"^P",18,"^19",1,"^1:",true,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^R","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * `:data` the extension definition as a map\n   * `:errors` a vector of errors map triggered during read"],"~$hook-type",["^ ","^W",null,"^L",["^ ","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^N",51,"^O",8,"^P",51,"^Q",17,"^X",true,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^R","Type of a hook\n   e.g. (= \"chat.command\" (hook-type 'chat.command.hello-world))"],"^X",true,"^6","~$pluto.core/hook-type","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",17,"^12",["^Z",[["~$s"]]],"^13",null,"^14",["^Z",[null,null]],"^O",1,"^15",false,"^N",51,"^16",["^4",["^18","~$clj-nil"]],"^P",51,"^19",1,"^1:",true,"^Y",["^Z",["^[",["^Z",[["~$s"]]]]],"^R","Type of a hook\n   e.g. (= \"chat.command\" (hook-type 'chat.command.hello-world))"],"~$order-comparator",["^ ","^W",null,"^L",["^ ","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^N",76,"^O",8,"^P",76,"^Q",24,"^X",true,"^Y",["^Z",["^[",["^Z",[["~$k1","~$k2"]]]]],"^R","Compares keys based on `order`"],"^X",true,"^6","~$pluto.core/order-comparator","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",24,"^12",["^Z",[["^1E","^1F"]]],"^13",null,"^14",["^Z",[null,null]],"^O",1,"^15",false,"^N",76,"^16","~$number","^P",76,"^19",2,"^1:",true,"^Y",["^Z",["^[",["^Z",[["^1E","^1F"]]]]],"^R","Compares keys based on `order`"],"~$capacity?",["^ ","^W",null,"^L",["^ ","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^N",36,"^O",8,"^P",36,"^Q",17,"^X",true,"^Y",["^Z",["^[",["^Z",[["~$m","~$s"]]]]]],"^X",true,"^6","~$pluto.core/capacity?","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",17,"^12",["^Z",[["~$m","~$s"]]],"^13",null,"^14",["^Z",[null,null]],"^O",1,"^15",false,"^N",36,"^16","^18","^P",36,"^19",2,"^1:",true,"^Y",["^Z",["^[",["^Z",[["~$m","~$s"]]]]]],"~$parse",["^ ","^W",null,"^L",["^ ","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^N",82,"^O",7,"^P",82,"^Q",12,"^Y",["^Z",["^[",["^Z",[["^1<","^1="]]]]],"^R","Parse an extension definition map as encapsulated in :data key of the map returned by `read`.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env`        a map of extension environment, will be provided as second parameter into event and query handlers\n   * `event-fn`   a function used to fire events\n   * `query-fn`   a function receiving a query and returning an `atom`\n   * `tracer`     [optional] a function that will be passed details about runtime extension execution (event fired, query values updated, ..): {:id 0 :category :error :type :event/dispatch :data {}}\n\n\n   Returns the input map modified so that values have been parsed into:\n   * `:data`        the result of parsing\n   * `:permissions` a vector of required permissions\n   * `:errors`      a vector of errors maps triggered during the parsing\n\n   If `errors` is not empty, `data` will not be available.\n\n   e.g.\n\n   {'view/a {:data ..\n             :permissions ..}\n\n    'view/b {:errors []}}\n\n   or\n\n   {:data        {'view/a (fn [o] [text \"hello\"])}\n    :permissions {'view/a #{}}"],"^6","~$pluto.core/parse","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",12,"^12",["^Z",[["^1<","^1="]]],"^13",null,"^14",["^Z",[null,null]],"^O",1,"^15",false,"^N",82,"^16",["^4",[null,"^18"]],"^P",82,"^19",2,"^1:",true,"^Y",["^Z",["^[",["^Z",[["^1<","^1="]]]]],"^R","Parse an extension definition map as encapsulated in :data key of the map returned by `read`.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env`        a map of extension environment, will be provided as second parameter into event and query handlers\n   * `event-fn`   a function used to fire events\n   * `query-fn`   a function receiving a query and returning an `atom`\n   * `tracer`     [optional] a function that will be passed details about runtime extension execution (event fired, query values updated, ..): {:id 0 :category :error :type :event/dispatch :data {}}\n\n\n   Returns the input map modified so that values have been parsed into:\n   * `:data`        the result of parsing\n   * `:permissions` a vector of required permissions\n   * `:errors`      a vector of errors maps triggered during the parsing\n\n   If `errors` is not empty, `data` will not be available.\n\n   e.g.\n\n   {'view/a {:data ..\n             :permissions ..}\n\n    'view/b {:errors []}}\n\n   or\n\n   {:data        {'view/a (fn [o] [text \"hello\"])}\n    :permissions {'view/a #{}}"],"~$parse-value-with",["^ ","^W",null,"^L",["^ ","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^N",40,"^O",7,"^P",40,"^Q",23,"^Y",["^Z",["^[",["^Z",[["~$capacities","~$t","~$k","~$f"]]]]]],"^6","~$pluto.core/parse-value-with","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",23,"^12",["^Z",[["^1N","~$t","~$k","~$f"]]],"^13",null,"^14",["^Z",[null,null]],"^O",1,"^15",false,"^N",40,"^16",["^4",["~$cljs.core/IVector","^18"]],"^P",40,"^19",4,"^1:",true,"^Y",["^Z",["^[",["^Z",[["^1N","~$t","~$k","~$f"]]]]]],"~$order",["^ ","^L",["^ ","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^N",74,"^O",14,"^P",74,"^Q",19,"~:const",true],"^6","~$pluto.core/order","^M","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^Q",19,"~:const-expr",["^ ","~:op","~:vector","~:env",["^ ","~:context","~:expr"],"~:form",["events","queries","views","hooks"],"~:items",[["^ ","^1U","^1R","~:val","events","^1W",["^ ","^1X","^1Y"],"^1Z","events","^T","^@"],["^ ","^1U","^1R","^20","queries","^1W",["^ ","^1X","^1Y"],"^1Z","queries","^T","^@"],["^ ","^1U","^1R","^20","views","^1W",["^ ","^1X","^1Y"],"^1Z","views","^T","^@"],["^ ","^1U","^1R","^20","hooks","^1W",["^ ","^1X","^1Y"],"^1Z","hooks","^T","^@"]],"~:children",["^1["],"^T","^1P"],"^O",1,"^1R",true,"^N",74,"^P",74,"^T","^1P"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:properties","~:ex-kind","~:errors","~:cause","~:pluto.reader.errors/existing-key","~:default","~:events","~:hooks","~$meta","~:pluto.reader.errors/reader-error","~:components","~:capacities","~:pluto.reader.errors/invalid-key","~:pluto.reader.errors/message","~:hierarchy","~:data"]],"~:order",["^2?","^27","^2C","^29","^28","^2E","^2D","^2;","^2:","^2A","^2@","^2<","^2=","^26","^2B","^2>"]],"^R","Main pluto namespace entry point."]