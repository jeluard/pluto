["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$read"]],"~:name","~$pluto.core","~:imports",null,"~:requires",["^ ","~$pluto.reader.errors","^:","~$pluto.reader.events","^;","~$cljs.tools.reader.edn","^<","~$pluto.reader.views","^=","~$views","^=","~$errors","^:","~$clojure.tools.reader.edn","^<","~$events","^;","~$string","~$clojure.string","~$types","~$pluto.reader.types","~$pluto.utils","^F","^E","^E","~$utils","^F","^C","^C","~$edn","^<"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$meta-properties",["^ ","~:meta",["^ ","~:file","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","~:line",47,"~:column",16,"~:end-line",47,"~:end-column",31,"~:private",true],"^S",true,"^6","~$pluto.core/meta-properties","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",31,"^P",1,"^O",47,"^Q",47,"~:tag","~$cljs.core/IMap"],"~$parse-value",["^ ","^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",34,"^P",11,"^Q",34,"^R",22,"~:doc","Parse an extension value from its type"],"^6","~$pluto.core/parse-value","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",22,"^P",1,"^O",34,"^Q",34,"^U","~$cljs.core/MultiFn","^X","Parse an extension value from its type"],"~$reader-error",["^ ","~:protocol-inline",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",12,"^P",8,"^Q",12,"^R",20,"^S",true,"~:arglists",["~#list",["~$quote",["^12",[["~$ex"]]]]]],"^S",true,"^6","~$pluto.core/reader-error","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",20,"~:method-params",["^12",[["^14"]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^P",1,"~:variadic?",false,"^O",12,"~:ret-tag",["^4",["~$clj","~$any"]],"^Q",12,"~:max-fixed-arity",1,"~:fn-var",true,"^11",["^12",["^13",["^12",[["^14"]]]]]],"~$accumulate",["^ ","^10",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",86,"^P",8,"^Q",86,"^R",18,"^S",true,"^11",["^12",["^13",["^12",[["~$ctx","~$ext","~$acc","~$k","~$v"]]]]],"^X","Accumulates the result of parsed primitives.\n   Shape is: {:data {'primitive data} :errors {'primitive errors} :permissions #{}}\n   If returned map contains :errors, :data is ignored."],"^S",true,"^6","~$pluto.core/accumulate","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",18,"^16",["^12",[["^1@","^1A","^1B","~$k","~$v"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",86,"^1:",["^4",["^1;","^1<"]],"^Q",86,"^1=",5,"^1>",true,"^11",["^12",["^13",["^12",[["^1@","^1A","^1B","~$k","~$v"]]]]],"^X","Accumulates the result of parsed primitives.\n   Shape is: {:data {'primitive data} :errors {'primitive errors} :permissions #{}}\n   If returned map contains :errors, :data is ignored."],"~$key-name",["^ ","^10",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",32,"^P",7,"^Q",32,"^R",15,"^11",["^12",["^13",["^12",[["~$k"]]]]]],"^6","~$pluto.core/key-name","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",15,"^16",["^12",[["~$k"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",32,"^1:","^B","^Q",32,"^1=",1,"^1>",true,"^11",["^12",["^13",["^12",[["~$k"]]]]]],"^5",["^ ","^10",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",18,"^P",7,"^Q",18,"^R",11,"^11",["^12",["^13",["^12",[["~$s"]]]]],"^X","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * `:data` the extension definition as a map\n   * `:errors` a vector of errors map triggered during read"],"^6","~$pluto.core/read","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",11,"^16",["^12",[["~$s"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",18,"^Q",18,"^1=",1,"^1>",true,"^11",["^12",["^13",["^12",[["~$s"]]]]],"^X","Reads an extension definition as an EDN string.\n\n   No semantic validation is performed at this stage.\n\n   Returns a map defining:\n   * `:data` the extension definition as a map\n   * `:errors` a vector of errors map triggered during read"],"~$hook-type",["^ ","^10",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",61,"^P",7,"^Q",61,"^R",16,"^11",["^12",["^13",["^12",[["~$s"]]]]],"^X","Type of a hook\n   e.g. (= \"chat.command\" (hook-type 'chat.command.hello-world))"],"^6","~$pluto.core/hook-type","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",16,"^16",["^12",[["~$s"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",61,"^1:",["^4",["^1<","~$clj-nil"]],"^Q",61,"^1=",1,"^1>",true,"^11",["^12",["^13",["^12",[["~$s"]]]]],"^X","Type of a hook\n   e.g. (= \"chat.command\" (hook-type 'chat.command.hello-world))"],"~$order-comparator",["^ ","^10",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",100,"^P",8,"^Q",100,"^R",24,"^S",true,"^11",["^12",["^13",["^12",[["~$k1","~$k2"]]]]],"^X","Compares keys based on `order`"],"^S",true,"^6","~$pluto.core/order-comparator","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",24,"^16",["^12",[["^1K","^1L"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",100,"^1:","~$number","^Q",100,"^1=",2,"^1>",true,"^11",["^12",["^13",["^12",[["^1K","^1L"]]]]],"^X","Compares keys based on `order`"],"~$lifecycle-properties",["^ ","^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",73,"^P",16,"^Q",73,"^R",36,"^S",true],"^S",true,"^6","~$pluto.core/lifecycle-properties","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",36,"^P",1,"^O",73,"^Q",73,"^U","^V"],"~$capacity?",["^ ","^10",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",38,"^P",8,"^Q",38,"^R",17,"^S",true,"^11",["^12",["^13",["^12",[["~$m","~$s"]]]]]],"^S",true,"^6","~$pluto.core/capacity?","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",17,"^16",["^12",[["~$m","~$s"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",38,"^1:","^1<","^Q",38,"^1=",2,"^1>",true,"^11",["^12",["^13",["^12",[["~$m","~$s"]]]]]],"~$parse",["^ ","^10",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",106,"^P",7,"^Q",106,"^R",12,"^11",["^12",["^13",["^12",[["^1@","^1A"]]]]],"^X","Parse an extension definition map as encapsulated in :data key of the map returned by `read`.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env`        a map of extension environment, will be provided as second parameter into event and query handlers\n   * `event-fn`   a function used to fire events\n   * `query-fn`   a function receiving a query and returning an `atom`\n   * `tracer`     [optional] a function that will be passed details about runtime extension execution (event fired, query values updated, ..): {:id 0 :category :error :type :event/dispatch :data {}}\n\n\n   Returns the input map modified so that values have been parsed into:\n   * `:data`        the result of parsing\n   * `:permissions` a vector of required permissions\n   * `:errors`      a vector of errors maps triggered during the parsing\n\n   If `errors` is not empty, `data` will not be available.\n\n   e.g.\n\n   {:data        {:views {:a (fn [o] [text \"hello\"])}}\n    :permissions {:views {:a #{}}}\n\n    or\n\n    {:errors     {:views {:a [{...}]}}\n    :permissions {:views {:a #{}}}"],"^6","~$pluto.core/parse","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",12,"^16",["^12",[["^1@","^1A"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",106,"^1:",["^4",[null,"^1<"]],"^Q",106,"^1=",2,"^1>",true,"^11",["^12",["^13",["^12",[["^1@","^1A"]]]]],"^X","Parse an extension definition map as encapsulated in :data key of the map returned by `read`.\n   `ctx` is a map defining:\n   * `capacities` a map of valid supported capacities (hooks, queries, events)\n   * `env`        a map of extension environment, will be provided as second parameter into event and query handlers\n   * `event-fn`   a function used to fire events\n   * `query-fn`   a function receiving a query and returning an `atom`\n   * `tracer`     [optional] a function that will be passed details about runtime extension execution (event fired, query values updated, ..): {:id 0 :category :error :type :event/dispatch :data {}}\n\n\n   Returns the input map modified so that values have been parsed into:\n   * `:data`        the result of parsing\n   * `:permissions` a vector of required permissions\n   * `:errors`      a vector of errors maps triggered during the parsing\n\n   If `errors` is not empty, `data` will not be available.\n\n   e.g.\n\n   {:data        {:views {:a (fn [o] [text \"hello\"])}}\n    :permissions {:views {:a #{}}}\n\n    or\n\n    {:errors     {:views {:a [{...}]}}\n    :permissions {:views {:a #{}}}"],"~$parse-value-with",["^ ","^10",null,"^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",42,"^P",7,"^Q",42,"^R",23,"^11",["^12",["^13",["^12",[["~$capacities","~$t","~$k","~$f"]]]]]],"^6","~$pluto.core/parse-value-with","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",23,"^16",["^12",[["^1V","~$t","~$k","~$f"]]],"^17",null,"^18",["^12",[null,null]],"^P",1,"^19",false,"^O",42,"^1:",["^4",["~$cljs.core/IVector","^1<"]],"^Q",42,"^1=",4,"^1>",true,"^11",["^12",["^13",["^12",[["^1V","~$t","~$k","~$f"]]]]]],"~$order",["^ ","^M",["^ ","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^O",98,"^P",14,"^Q",98,"^R",19,"~:const",true],"^6","~$pluto.core/order","^N","/home/julien/Documents/Projects/pluto/src/pluto/core.cljc","^R",19,"~:const-expr",["^ ","~:op","~:vector","~:env",["^ ","~:context","~:expr"],"~:form",["meta","events","views","hooks","lifecycle"],"~:items",[["^ ","^21","^1Z","~:val","meta","^23",["^ ","^24","^25"],"^26","meta","^U","^B"],["^ ","^21","^1Z","^28","events","^23",["^ ","^24","^25"],"^26","events","^U","^B"],["^ ","^21","^1Z","^28","views","^23",["^ ","^24","^25"],"^26","views","^U","^B"],["^ ","^21","^1Z","^28","hooks","^23",["^ ","^24","^25"],"^26","hooks","^U","^B"],["^ ","^21","^1Z","^28","lifecycle","^23",["^ ","^24","^25"],"^26","lifecycle","^U","^B"]],"~:children",["^27"],"^U","^1X"],"^P",1,"^1Z",true,"^O",98,"^Q",98,"^U","^1X"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:description","~:properties","~:ex-kind","~:on-installation?","~:errors","~:cause","~:on-activation?","~:pluto.reader.errors/existing-key","~:default","~:on-deinstallation?","^6","~:events","~:hooks","~:documentation?","~:ephemeral?","~:pluto.reader.errors/reader-error","~:string","~:event","~:components","~:capacities","~:on-deactivation?","~:pluto.reader.errors/invalid-key","~:pluto.reader.errors/message","~:hierarchy","~:boolean","~:data"]],"~:order",["^2L","^2@","^2S","^2C","^2B","^2V","^2T","^2F","^2E","^6","^2>","^2J","^2M","^2P","^2H","^2O","^2I","^2?","^2K","^2D","^2A","^2Q","^2G","^2U","^2N","^2R"]],"^X","Main pluto namespace entry point."]